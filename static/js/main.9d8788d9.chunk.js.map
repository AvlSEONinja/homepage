{"version":3,"sources":["components/SearchBar.tsx","components/BookmarkEditor.tsx","components/BookmarkEntry.tsx","components/BookmarkBar.tsx","components/TodoEntry.tsx","components/TodoBox.tsx","utils/Formater.ts","components/TrelloCard.tsx","components/TrelloSettings.tsx","components/TrelloIntegration.tsx","components/Clock.tsx","components/CalendarIntegration.tsx","App.tsx","serviceWorker.js","index.js"],"names":["SearchBar","action","id","className","name","placeholder","autoComplete","type","src","alt","Component","BookmarkEditor","handleNameChange","e","setState","target","value","handleURLChange","url","handleIconChange","icon","handleDelete","props","onClose","state","handleSave","trim","length","startsWith","onSave","this","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","faTimes","onChange","defaultValue","onClick","closeButtonText","BookmarkEntry","handleEdit","entry","onUpdate","onDelete","split","href","rel","data-toggle","data-target","faPen","BookmarkBar","editable","entries","Array","saveBookmarks","localStorage","setItem","JSON","stringify","handleEditToggle","handleBookmarkDelete","bookmark","a","filter","handleBookmarkUpdate","push","handleNewBookmark","Math","random","toString","substring","window","location","reload","getEntries","slice","bookmarks","map","key","Fragment","getItem","parse","faCheck","faPlus","TodoEntry","done","handleDone","onDoneToggle","faCheckCircle","faCircle","text","faTrash","TodoBox","saveTodoList","handleInputKey","keyCode","handleDoneToggle","todo","onKeyUp","withLeadingZeroes","number","size","str","TrelloCard","parseDate","dateString","date","Date","getFullYear","getMonth","getDate","card","shortUrl","faShareSquare","due","TrelloSettings","apiKey","listId","loadedApiKey","loginState","boards","lists","selectedBoard","boardsLoaded","handleKeyChange","componentDidMount","handleLogin","loadBoards","onReady","Trello","get","res","console","log","err","loadLists","handleBoardChange","handleListChange","getTrelloClient","clientVersion","apiEndpoint","authEndpoint","intentEndpoint","authorizeName","authorizeType","authorizePersist","authorizeInteractive","authorizeScopeRead","authorizeScopeWrite","authorizeScopeAccount","authorizeExpiration","authorizeOnSuccess","authorizeOnError","autoAuthorize","authorizeButton","buttonStyle","buttonColor","buttonText","board","list","TrelloIntegration","logged","cards","loadCards","trello","showTrelloInfo","faCog","onSettingsChange","Clock","timerId","setInterval","clearInterval","hour","pad","getHours","getMinutes","getSeconds","CalendarIntegration","locale","App","backgroundAuthor","backgroundAuthorLink","handleTrelloSave","loadTrelloIntegration","configEncoded","config","background","now","backgroundInfo","day","night","document","getElementsByTagName","image","author","link","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d8788d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../styles/SearchBar.scss\";\n\nclass SearchBar extends Component {\n  render() {\n    return (\n      <form\n        action=\"https://duckduckgo.com/\"\n        id=\"search-bar-container\"\n        className=\"homepage-card\"\n      >\n        <input name=\"q\" placeholder=\"Search at DuckDuckGO\" autoComplete=\"off\" />\n        <button type=\"submit\">\n          <img\n            src=\"https://duckduckgo.com/assets/common/dax-logo.svg\"\n            alt=\"DuckDuckGO Logo\"\n          />\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface BookmarkEditorProps {\n  id: string;\n  onSave: Function;\n  name: string;\n  url: string;\n  icon: string;\n  closeButtonText: string;\n  onClose: Function;\n}\n\ninterface BookmarkEditorState {\n  name: string;\n  url: string;\n  icon: string;\n}\n\nclass BookmarkEditor extends Component<\n  BookmarkEditorProps,\n  BookmarkEditorState\n> {\n  componentDidMount() {\n    this.setState({\n      name: this.props.name,\n      url: this.props.url,\n      icon: this.props.icon\n    });\n  }\n\n  handleNameChange = (e: React.ChangeEvent<HTMLElement>) => {\n    this.setState({ name: (e.target as any).value });\n  };\n\n  handleURLChange = (e: React.ChangeEvent<HTMLElement>) => {\n    this.setState({ url: (e.target as any).value });\n  };\n\n  handleIconChange = (e: React.ChangeEvent<HTMLElement>) => {\n    this.setState({ icon: (e.target as any).value });\n  };\n\n  handleDelete = () => {\n    this.props.onClose({ name: this.state.name, icon: this.state.icon });\n  };\n\n  handleSave = () => {\n    if (\n      this.state.name.trim().length === 0 ||\n      this.state.url.trim().length === 0\n    ) {\n      return;\n    }\n\n    let url = this.state.url;\n    if (!url.startsWith(\"http\")) {\n      url = \"https://\" + url;\n    }\n\n    this.props.onSave({ url, name: this.state.name, icon: this.state.icon });\n  };\n\n  render() {\n    return (\n      <div\n        className=\"modal fade\"\n        id={this.props.id}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-labelledby=\"bookmark-editor-modal-label\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"bookmark-editor-modal-label\">\n                Bookmark editor\n              </h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">\n                  <FontAwesomeIcon icon={faTimes} />\n                </span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <div className=\"bookmark-settings-entry\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Bookmark name\"\n                  className=\"bookmark-entry-name\"\n                  onChange={this.handleNameChange}\n                  defaultValue={this.props.name}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Bookmark URL\"\n                  className=\"bookmark-entry-url\"\n                  onChange={this.handleURLChange}\n                  defaultValue={this.props.url}\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Bookmark icon (leave empty to use the site favicon)\"\n                  className=\"bookmark-entry-icon\"\n                  onChange={this.handleIconChange}\n                  defaultValue={this.props.icon}\n                />\n              </div>\n            </div>\n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n                onClick={this.handleDelete}\n              >\n                {this.props.closeButtonText}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                onClick={this.handleSave}\n              >\n                Save changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default BookmarkEditor;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";\nimport BookmarkEditor from \"./BookmarkEditor\";\n\ninterface BookmarkEntryProps {\n  id: string;\n  onUpdate: Function;\n  onDelete: Function;\n  url: string;\n  icon: string;\n  name: string;\n}\n\nclass BookmarkEntry extends Component<BookmarkEntryProps> {\n  handleEdit = () => {};\n\n  handleSave = (entry: any) => {\n    entry.id = this.props.id;\n    this.props.onUpdate(entry);\n  };\n\n  handleDelete = (entry: any) => {\n    entry.id = this.props.id;\n    this.props.onDelete(entry);\n  };\n\n  render() {\n    let icon = this.props.icon;\n\n    if (icon === \"\") {\n      icon = `https://external-content.duckduckgo.com/ip3/${\n        this.props.url.split(\"://\")[1].split(\"/\")[0]\n      }.ico`;\n    }\n\n    return (\n      <div className=\"bookmark-entry\">\n        <a href={this.props.url} target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={icon} alt={`${this.props.name} icon`} />\n        </a>\n        <div\n          className=\"bookmark-edit\"\n          data-toggle=\"modal\"\n          data-target={`#bookmark-edit-modal-${this.props.id}`}\n        >\n          <FontAwesomeIcon icon={faPen} />\n        </div>\n        <BookmarkEditor\n          id={`bookmark-edit-modal-${this.props.id}`}\n          name={this.props.name}\n          url={this.props.url}\n          icon={this.props.icon}\n          closeButtonText=\"Delete\"\n          onSave={this.handleSave}\n          onClose={this.handleDelete}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BookmarkEntry;\n","import React, { Component } from \"react\";\nimport \"../styles/BookmarkBar.scss\";\nimport BookmarkEntry from \"./BookmarkEntry\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faPen, faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport BookmarkEditor from \"./BookmarkEditor\";\n\ninterface BookmarkBarState {\n  editable: boolean;\n  entries: Array<any>;\n}\n\nclass BookmarkBar extends Component<any, BookmarkBarState> {\n  state = { editable: false, entries: new Array<any>() };\n\n  saveBookmarks = () => {\n    localStorage.setItem(\"bookmarks\", JSON.stringify(this.state.entries));\n  };\n\n  componentDidMount() {\n    const bookmarks = localStorage.getItem(\"bookmarks\");\n    if (bookmarks !== null) {\n      const entries = JSON.parse(bookmarks);\n      this.setState({ entries });\n    } else {\n      this.saveBookmarks();\n    }\n  }\n\n  handleEditToggle = () => {\n    this.setState({ editable: !this.state.editable });\n  };\n\n  handleBookmarkDelete = async (bookmark: any) => {\n    let entries = this.state.entries;\n    entries = entries.filter(entry => entry.id !== bookmark.id);\n    await this.setState({ entries });\n    this.saveBookmarks();\n  };\n\n  handleBookmarkUpdate = async (bookmark: any) => {\n    let entries = this.state.entries;\n    entries = entries.filter(entry => entry.id !== bookmark.id);\n    entries.push(bookmark);\n    await this.setState({ entries });\n    this.saveBookmarks();\n  };\n\n  handleNewBookmark = (entry: any) => {\n    let id = \"\";\n    do {\n      id =\n        Math.random()\n          .toString(36)\n          .substring(2, 12) +\n        Math.random()\n          .toString(36)\n          .substring(2, 12) +\n        Math.random()\n          .toString(36)\n          .substring(2, 12) +\n        Math.random()\n          .toString(36)\n          .substring(2, 12);\n    } while (\n      // eslint-disable-next-line\n      this.state.entries.filter(entry => entry.id === id).length !== 0\n    );\n    entry.id = id;\n\n    const entries = this.state.entries;\n    entries.push(entry);\n    this.setState({ entries });\n    this.saveBookmarks();\n    window.location.reload();\n  };\n\n  getEntries = () => {\n    let entries = this.state.entries;\n\n    if (entries.length > 14) {\n      entries = entries.slice(0, 15);\n    }\n\n    const bookmarks = entries.map(bookmark => (\n      <BookmarkEntry\n        key={bookmark.id}\n        id={bookmark.id}\n        name={bookmark.name}\n        url={bookmark.url}\n        icon={bookmark.icon}\n        onUpdate={this.handleBookmarkUpdate}\n        onDelete={this.handleBookmarkDelete}\n      />\n    ));\n    if (entries.length > 14) {\n      return (\n        <React.Fragment>\n          {bookmarks}\n          <h4>...</h4>\n        </React.Fragment>\n      );\n    } else {\n      return bookmarks;\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"bookmark-bar\" className=\"homepage-card\">\n        <div\n          className={`bookmark-list ${this.state.editable ? \"editable\" : \"\"}`}\n        >\n          {this.getEntries()}\n        </div>\n        <div className=\"homepage-card-header\">\n          <div\n            id=\"bookmark-edit-toggle\"\n            className=\"homepage-card-settings-holder\"\n            onClick={this.handleEditToggle}\n          >\n            <FontAwesomeIcon\n              icon={this.state.editable ? faCheck : faPen}\n              className=\"homepage-card-settings\"\n            />\n          </div>\n          <div\n            className=\"homepage-card-settings-holder\"\n            data-toggle=\"modal\"\n            data-target=\"#bookmark-add-modal\"\n          >\n            <FontAwesomeIcon icon={faPlus} className=\"homepage-card-settings\" />\n          </div>\n        </div>\n        <BookmarkEditor\n          id=\"bookmark-add-modal\"\n          name=\"\"\n          url=\"\"\n          icon=\"\"\n          closeButtonText=\"Close\"\n          onSave={this.handleNewBookmark}\n          onClose={() => {}}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BookmarkBar;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\ninterface TodoEntryProps {\n  id: string;\n  text: string;\n  done: boolean;\n  onDelete: Function;\n  onDoneToggle: Function;\n}\n\ninterface TodoEntryState {\n  done: boolean;\n}\n\nclass TodoEntry extends Component<TodoEntryProps, TodoEntryState> {\n  state = { done: false };\n\n  componentDidMount() {\n    this.setState({ done: this.props.done });\n  }\n\n  handleDone = async () => {\n    await this.setState({ done: !this.state.done });\n\n    this.props.onDoneToggle(this.props.id, this.state.done);\n  };\n\n  handleDelete = () => {\n    this.props.onDelete(this.props.id);\n  };\n\n  render() {\n    return (\n      <div className=\"todo-entry\">\n        <div className=\"todo-entry-holder\">\n          <div className=\"todo-checkbox\" onClick={this.handleDone}>\n            <FontAwesomeIcon\n              icon={this.state.done ? faCheckCircle : faCircle}\n            />\n          </div>\n          <div className={this.state.done ? \"checked\" : \"\"}>\n            {this.props.text}\n          </div>\n        </div>\n        <div className=\"todo-entry-actions\">\n          <div className=\"todo-entry-action\" onClick={this.handleDelete}>\n            <FontAwesomeIcon icon={faTrash} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoEntry;\n","import React, { Component } from \"react\";\nimport TodoEntry from \"./TodoEntry\";\nimport \"../styles/TodoBox.scss\";\n\ninterface TodoEntryState {\n  text: string;\n  done: boolean;\n  id: string;\n}\n\ninterface TodoBoxState {\n  entries: Array<TodoEntryState>;\n}\n\nclass TodoBox extends Component<any, TodoBoxState> {\n  state = { entries: new Array<TodoEntryState>() };\n\n  saveTodoList = () => {\n    localStorage.setItem(\"todo-list\", JSON.stringify(this.state.entries));\n  };\n\n  componentDidMount() {\n    const todo = localStorage.getItem(\"todo-list\");\n    if (todo !== null) {\n      const entries = JSON.parse(todo);\n      this.setState({ entries });\n    } else {\n      this.saveTodoList();\n    }\n  }\n\n  handleInputKey = (e: React.KeyboardEvent<HTMLElement>) => {\n    if (e.keyCode === 13) {\n      const value = (e.target as any).value as string;\n\n      if (value.trim().length === 0) {\n        return;\n      }\n\n      let id = \"\";\n\n      do {\n        id =\n          Math.random()\n            .toString(36)\n            .substring(2, 12) +\n          Math.random()\n            .toString(36)\n            .substring(2, 12) +\n          Math.random()\n            .toString(36)\n            .substring(2, 12) +\n          Math.random()\n            .toString(36)\n            .substring(2, 12);\n      } while (\n        // eslint-disable-next-line\n        this.state.entries.filter(entry => entry.id === id).length !== 0\n      );\n\n      const entries = this.state.entries;\n      entries.push({ text: value, done: false, id });\n      this.setState({ entries });\n      this.saveTodoList();\n      (e.target as any).value = \"\";\n    }\n  };\n\n  handleDelete = async (id: string) => {\n    let entries = this.state.entries;\n    entries = entries.filter(value => value.id !== id);\n    await this.setState({ entries });\n    this.saveTodoList();\n  };\n\n  handleDoneToggle = async (id: string, done: boolean) => {\n    let entries = this.state.entries;\n    entries = entries.map(value => {\n      if (value.id === id) value.done = done;\n\n      return value;\n    });\n    await this.setState({ entries });\n    this.saveTodoList();\n  };\n\n  render() {\n    return (\n      <div id=\"todo-box\" className=\"homepage-card\">\n        <h4>TODO:</h4>\n        <input\n          id=\"todo-new-entry\"\n          className=\"\"\n          type=\"text\"\n          placeholder=\"Add new things to your TODO\"\n          autoComplete=\"off\"\n          onKeyUp={this.handleInputKey}\n        />\n        <div>\n          {this.state.entries.map(entry => (\n            <TodoEntry\n              onDelete={this.handleDelete}\n              onDoneToggle={this.handleDoneToggle}\n              text={entry.text}\n              done={entry.done}\n              id={entry.id}\n              key={entry.id}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoBox;\n","export function withLeadingZeroes(number: number, size: number): string {\n  let str = number.toString();\n\n  while (str.length < size) {\n    str = \"0\" + str;\n  }\n  return str;\n}\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faShareSquare } from \"@fortawesome/free-regular-svg-icons\";\nimport { withLeadingZeroes } from \"../utils/Formater\";\n\ninterface TrelloCardProps {\n  card: any;\n}\n\nclass TrelloCard extends Component<TrelloCardProps> {\n  parseDate = (dateString: string) => {\n    const date = new Date(Date.parse(dateString));\n    return `${date.getFullYear()}/${withLeadingZeroes(\n      date.getMonth() + 1,\n      2\n    )}/${withLeadingZeroes(date.getDate(), 2)}`;\n  };\n\n  render() {\n    const { card } = this.props;\n    return (\n      <div className=\"trello-card\">\n        <div className=\"trello-card-content\">\n          <div className=\"trello-card-name\">{card.name}</div>\n          <div className=\"trello-card-actions\">\n            <a\n              target=\"blank\"\n              href={this.props.card.shortUrl}\n              className=\"trello-card-action-anchor\"\n            >\n              <div className=\"trello-card-action\">\n                <FontAwesomeIcon icon={faShareSquare} />\n              </div>\n            </a>\n          </div>\n        </div>\n        {card.due === null ? (\n          \"\"\n        ) : (\n          <div className=\"trello-card-due\">{this.parseDate(card.due)}</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default TrelloCard;\n","import React, { Component } from \"react\";\nimport \"../styles/TrelloSettings.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\nimport TrelloClient, { Trello } from \"react-trello-client\";\n\ninterface TrelloSettingsProps {\n  apiKey: string;\n  listId: string;\n  onSave: Function;\n  onReady: Function;\n}\n\ninterface TrelloSettingsState {\n  apiKey: string;\n  listId: string;\n  loadedApiKey: string;\n  boards: Array<any>;\n  lists: Array<any>;\n  selectedBoard: string;\n  boardsLoaded: boolean;\n  /*\n  -2 = No Key\n  -1 = Key ok, no Token\n  0 = Nothing yet\n  1 = Key and Token OK, nedding Client Start\n  2 = Key, Token and Client OK\n  */\n  loginState: number;\n}\n\nclass TrelloSettings extends Component<\n  TrelloSettingsProps,\n  TrelloSettingsState\n> {\n  state = {\n    apiKey: \"\",\n    listId: \"\",\n    loadedApiKey: \"\",\n    loginState: 0,\n    boards: new Array<any>(),\n    lists: new Array<any>(),\n    selectedBoard: \"\",\n    boardsLoaded: false\n  };\n\n  handleSave = () => {\n    let loginState = 0;\n\n    if (this.state.apiKey.trim().length === 0) {\n      loginState = -2;\n    } else {\n      if (localStorage.getItem(\"trello_token\") === null) {\n        loginState = -1;\n      } else {\n        loginState = 1;\n      }\n    }\n\n    this.setState({ loadedApiKey: this.state.apiKey, loginState });\n    this.props.onSave(this.state.apiKey, this.state.listId);\n  };\n\n  handleKeyChange = (e: React.ChangeEvent<HTMLElement>) => {\n    this.setState({ apiKey: (e.target as any).value });\n  };\n\n  componentDidMount = async () => {\n    let loginState = 0;\n\n    if (this.props.apiKey.trim().length === 0) {\n      loginState = -2;\n    } else {\n      if (localStorage.getItem(\"trello_token\") === null) {\n        loginState = -1;\n      } else {\n        loginState = 1;\n      }\n    }\n\n    await this.setState({\n      loginState,\n      apiKey: this.props.apiKey,\n      listId: this.props.listId,\n      loadedApiKey: this.props.apiKey\n    });\n  };\n\n  handleLogin = () => {\n    if (!this.state.boardsLoaded) {\n      this.loadBoards();\n    }\n    this.props.onReady(Trello);\n  };\n\n  loadBoards = async () => {\n    Trello.get(\n      \"members/me/boards\",\n      (res: any) => {\n        console.log(\"get boards\");\n        this.setState({ boardsLoaded: true, boards: res });\n      },\n      (err: any) => {\n        console.log(err);\n      }\n    );\n  };\n\n  loadLists = async () => {\n    Trello.get(\n      `boards/${this.state.selectedBoard}/lists`,\n      (res: any) => {\n        console.log(\"get lists\");\n        this.setState({ lists: res });\n      },\n      (err: any) => {\n        console.log(err);\n      }\n    );\n  };\n\n  handleBoardChange = async (e: React.ChangeEvent<any>) => {\n    await this.setState({ selectedBoard: e.target.value });\n    this.loadLists();\n  };\n\n  handleListChange = async (e: React.ChangeEvent<any>) => {\n    this.setState({ listId: e.target.value });\n  };\n\n  getTrelloClient = () => {\n    if (this.state.loginState === -2 || this.state.loginState === 0)\n      return null;\n    return (\n      <TrelloClient\n        apiKey={this.state.loadedApiKey} // Get the API key from https://trello.com/app-key/\n        clientVersion={1} // number: {1}, {2}, {3}\n        apiEndpoint=\"https://api.trello.com\" // string: \"https://api.trello.com\"\n        authEndpoint=\"https://trello.com\" // string: \"https://trello.com\"\n        intentEndpoint=\"https://trello.com\" // string: \"https://trello.com\"\n        authorizeName=\"Homepage\" // string: \"React Trello Client\"\n        authorizeType=\"popup\" // string: popup | redirect\n        authorizePersist={true}\n        authorizeInteractive={true}\n        authorizeScopeRead={true} // boolean: {true} | {false}\n        authorizeScopeWrite={true} // boolean: {true} | {false}\n        authorizeScopeAccount={true} // boolean: {true} | {false}\n        authorizeExpiration=\"never\" // string: \"1hour\", \"1day\", \"30days\" | \"never\"\n        authorizeOnSuccess={this.handleLogin} // function: {() => console.log('Login successful!')}\n        authorizeOnError={() => console.log(\"Login error!\")} // function: {() => console.log('Login error!')}\n        autoAuthorize={true} // boolean: {true} | {false}\n        authorizeButton={true} // boolean: {true} | {false}\n        buttonStyle=\"metamorph\" // string: \"metamorph\" | \"flat\"\n        buttonColor=\"green\" // string: \"green\" | \"grayish-blue\" | \"light\"\n        buttonText=\"Login with Trello\" // string: \"Login with Trello\"\n      />\n    );\n  };\n\n  render() {\n    return (\n      <div\n        className=\"modal fade\"\n        id=\"trello-settings-modal\"\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-labelledby=\"trello-setings-modal-label\"\n        aria-hidden=\"true\"\n      >\n        <div className=\"modal-dialog\" role=\"document\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h5 className=\"modal-title\" id=\"trello-settings-modal-label\">\n                Trello settings\n              </h5>\n              <button\n                type=\"button\"\n                className=\"close\"\n                data-dismiss=\"modal\"\n                aria-label=\"Close\"\n              >\n                <span aria-hidden=\"true\">\n                  <FontAwesomeIcon icon={faTimes} />\n                </span>\n              </button>\n            </div>\n            <div className=\"modal-body\">\n              <label>\n                Get a API key in{\" \"}\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  href=\"https://trello.com/app-key\"\n                >\n                  https://trello.com/app-key\n                </a>\n              </label>\n              <input\n                defaultValue={this.state.apiKey}\n                onChange={this.handleKeyChange}\n                placeholder=\"API key (insert a value and save before login)\"\n              />\n              <div\n                id=\"trello-login-container\"\n                className={this.state.loginState !== -1 ? \"hidden\" : \"\"}\n              >\n                {this.getTrelloClient()}\n              </div>\n              <div\n                id=\"board-selector-holder\"\n                className={\n                  this.state.loginState === 1 || this.state.loginState === -1\n                    ? \"\"\n                    : \"hidden\"\n                }\n              >\n                <label>Board:</label>\n                <select\n                  id=\"title\"\n                  name=\"title\"\n                  defaultValue=\"\"\n                  onChange={this.handleBoardChange}\n                >\n                  <option value=\"\">--</option>\n                  {this.state.boards.map((board: any) => (\n                    <option key={board.id} value={board.id}>\n                      {board.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div\n                id=\"list-selector-holder\"\n                className={this.state.selectedBoard !== \"\" ? \"\" : \"hidden\"}\n              >\n                <label>List:</label>\n                <select\n                  id=\"title\"\n                  name=\"title\"\n                  defaultValue=\"\"\n                  onChange={this.handleListChange}\n                >\n                  <option value=\"\">--</option>\n                  {this.state.lists.map((list: any) => (\n                    <option key={list.id} value={list.id}>\n                      {list.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n            <div className=\"modal-footer\">\n              <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-dismiss=\"modal\"\n                onClick={() => window.location.reload()}\n              >\n                Close\n              </button>\n              <button\n                onClick={this.handleSave}\n                type=\"button\"\n                className=\"btn btn-primary\"\n              >\n                Save changes\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TrelloSettings;\n","import React, { Component } from \"react\";\nimport \"../styles/TrelloIntegration.scss\";\nimport TrelloCard from \"./TrelloCard\";\nimport { faCog } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport TrelloSettings from \"./TrelloSettings\";\n\ninterface TrelloIntegrationProps {\n  apiKey: string;\n  listId: string;\n  onSettingsChange: Function;\n}\n\ninterface TrelloIntegrationState {\n  logged: boolean;\n  cards: Array<any>;\n}\n\nclass TrelloIntegration extends Component<\n  TrelloIntegrationProps,\n  TrelloIntegrationState\n> {\n  state = { logged: false, cards: new Array<any>() };\n\n  loadCards = (trello: any) => {\n    if (this.state.logged) return;\n    trello.get(\n      `lists/${this.props.listId}/cards`,\n      (res: any) => {\n        console.log(\"get cards\");\n        const cards = res;\n        this.setState({ logged: true, cards });\n      },\n      (err: any) => {\n        console.log(\"ERROR:\", err);\n      }\n    );\n  };\n\n  showTrelloInfo = () => {\n    if (\n      this.props.apiKey.trim().length === 0 ||\n      this.props.listId.trim().length === 0\n    )\n      return <h6>Setup Trello config to start using</h6>;\n\n    return (\n      <div id=\"trello-cards-container\">\n        {this.state.cards.map(card => (\n          <TrelloCard key={card.id} card={card} />\n        ))}\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <div id=\"homepage-trello\" className=\"homepage-card\">\n        <div className=\"homepage-card-header\">\n          <h4>Trello:</h4>\n          <div\n            className=\"homepage-card-settings-holder\"\n            data-toggle=\"modal\"\n            data-target=\"#trello-settings-modal\"\n          >\n            <FontAwesomeIcon icon={faCog} className=\"homepage-card-settings\" />\n          </div>\n        </div>\n        <TrelloSettings\n          apiKey={this.props.apiKey}\n          listId={this.props.listId}\n          onSave={this.props.onSettingsChange}\n          onReady={this.loadCards}\n        />\n        {this.showTrelloInfo()}\n      </div>\n    );\n  }\n}\n\nexport default TrelloIntegration;\n","import React, { Component } from \"react\";\nimport { withLeadingZeroes as pad } from \"../utils/Formater\";\n\ninterface ClockState {\n  date: Date;\n}\n\nclass Clock extends Component<any, ClockState> {\n  state = { date: new Date() };\n\n  timerId?: any;\n\n  componentDidMount() {\n    this.timerId = setInterval(() => this.setState({ date: new Date() }), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  render() {\n    const { date } = this.state;\n    const hour = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}:${pad(\n      date.getSeconds(),\n      2\n    )}`;\n    return <h3 id=\"calendar-clock\">{hour}</h3>;\n  }\n}\n\nexport default Clock;\n","import React, { Component } from \"react\";\nimport Calendar from \"react-calendar\";\nimport \"../styles/CalendarIntegration.scss\";\nimport Clock from \"./Clock\";\n\nclass CalendarIntegration extends Component {\n  render() {\n    return (\n      <div id=\"calendar-container\" className=\"homepage-card\">\n        <h4>Calendar:</h4>\n        <Clock />\n        <Calendar\n          locale=\"en-US\"\n          value={new Date()}\n          className=\"homepage-calendar\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default CalendarIntegration;\n","import React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport BookmarkBar from \"./components/BookmarkBar\";\nimport \"./styles/App.scss\";\nimport TodoBox from \"./components/TodoBox\";\nimport TrelloIntegration from \"./components/TrelloIntegration\";\nimport CalendarIntegration from \"./components/CalendarIntegration\";\nimport backgroundInfo from \"./assets/background.json\";\n\ninterface AppState {\n  backgroundAuthor: string;\n  backgroundAuthorLink: string;\n}\n\nclass App extends Component<any, AppState> {\n  state = { backgroundAuthor: \"\", backgroundAuthorLink: \"\" };\n\n  componentDidMount() {\n    let background: any;\n\n    const now = new Date();\n    if (now.getHours() >= 6 && now.getHours() <= 18) {\n      background = backgroundInfo.day;\n    } else {\n      background = backgroundInfo.night;\n    }\n\n    document.getElementsByTagName(\"body\")[0].background = background.image;\n\n    this.setState({\n      backgroundAuthor: background.author.name,\n      backgroundAuthorLink: background.author.link\n    });\n  }\n\n  handleTrelloSave = (apiKey?: string, listId?: string) => {\n    localStorage.setItem(\"trello-config\", JSON.stringify({ apiKey, listId }));\n  };\n\n  loadTrelloIntegration = () => {\n    const configEncoded = localStorage.getItem(\"trello-config\");\n    if (configEncoded === null) {\n      return (\n        <TrelloIntegration\n          apiKey={\"\"}\n          listId={\"\"}\n          onSettingsChange={this.handleTrelloSave}\n        />\n      );\n    } else {\n      const config = JSON.parse(configEncoded);\n      return (\n        <TrelloIntegration\n          apiKey={config.apiKey}\n          listId={config.listId}\n          onSettingsChange={this.handleTrelloSave}\n        />\n      );\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"header-container\">\n          <SearchBar />\n          <BookmarkBar />\n        </div>\n        <div id=\"middle-container\">\n          <TodoBox />\n          <CalendarIntegration />\n          {this.loadTrelloIntegration()}\n        </div>\n        <div id=\"footer-container\">\n          <div className=\"footer-info\">\n            Homepage made by{\" \"}\n            <a\n              href=\"https://github.com/Pauloo27/homepage\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              Pauloo27\n            </a>{\" \"}\n            under GPL-2 license.\n          </div>\n          <div id=\"background-info\" className=\"footer-info\">\n            Image by{\" \"}\n            <a\n              href={this.state.backgroundAuthorLink}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {this.state.backgroundAuthor}\n            </a>\n            .\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/js/bootstrap\";\nimport \"./styles/Global.scss\";\nimport App from \"./App.tsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}